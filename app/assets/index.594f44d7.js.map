{"mappings":"0xCAAA,IAAMA,EAAAC,EAAA,6BAUGC,EAAIC,GACTC,WAAWC,YAAYF,GAV3BG,SAASC,iBAAiB,oBAAkBC,UACxCN,EAAI,2BACJ,MACMO,EAAS,IAAGT,EAAAU,WAAY,CAAEC,MADN,kPAWAR,EAT1BS,OAAOH,OAASA,EAChBP,EAAI,yBAQsBC,EAPL,GAQrBU,YAAYR,YAAYF,MAwD5BS,OAAOE,IAAK,CAACZ,IAAAA,EAAIa,6BApCYC,EAAQC,EAAcC,GAC/ChB,EAAI,uBACJ,IAAIiB,uBASeC,GAKnB,MAAMD,QAAYV,OAAOY,UAAUD,GAEnC,OADAlB,EAAI,sBAAuBiB,EAAIG,YACxBH,EAhBSI,UAfGC,OACnB,IAAIC,EAAMD,EAAQE,MAAM,KAEpBC,GADOF,EAAI,GAAGG,MAAK,WAAY,GACxBC,KAAKJ,EAAI,KAChBK,EAAIH,EAAKI,OACTC,EAAQ,IAAIC,WAAWH,GAEpBA,KACHE,EAAMF,GAAKH,EAAKO,WAAWJ,GAE/B,OAAOE,EAKiBG,CAAclB,IACtCmB,YAAW,eApBoBjC,EAAAA,EAqBDkC,KAAKC,UAAU,CACrCC,QAASvB,EACTG,IAAKA,EAAIG,aAtBjBkB,iBAAiBnC,YAAYF,KAwB1Be","sources":["src/index.js"],"sourcesContent":["import { NFTStorage } from \"./nft.storage.js\"\ndocument.addEventListener('DOMContentLoaded', async () => {\n    log(\"DOMContentLoaded  start\");\n    const NFT_STORAGE_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDIzZkYwOTE1MjRDNDc5YURBNmE5NWU2M2Q4OUZlMTU1NDgwNTlDMzQiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0NjI3NTc2ODgzNSwibmFtZSI6ImFwcCJ9.l3RD6Ab4L5v0ZVJuXsZmwDARkePYwhwK7Ekj-a2GcZg'\n    const client = new NFTStorage({ token: NFT_STORAGE_TOKEN })\n    window.client = client\n    log(\"DOMContentLoaded  end\");\n    sendNodeReadyMessage(\"\");\n})\n\nfunction log(message) {\n    logHandler.postMessage(message);\n}\n\nfunction sendNodeReadyMessage(message) {\n    onNodeReady.postMessage(message);\n}\n\nfunction sendUploadCompleteMessage(message) {\n    onUploadComplete.postMessage(message);\n}\n\nfunction dataURLtoFile(dataurl) {\n    var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return u8arr;\n}\n\nasync function addBase64File(taskId, base64String, delay) {\n    log(\"addBase64File start\")\n    let cid = await addFile(dataURLtoFile(base64String));\n    setTimeout(function () {\n        sendUploadCompleteMessage(JSON.stringify({\n            task_id: taskId,\n            cid: cid.toString()\n        }));\n    }, delay);\n}\n\nasync function addFile(file) {\n    // const {cid} = await node.add(file)\n    // log('successfully stored', cid.toString())\n    // await pinFile(cid)\n    // return cid;\n    const cid = await client.storeBlob(file)\n    log('successfully stored', cid.toString())\n    return cid\n\n}\n\nasync function catFile(cid) {\n    for await (const data of\n        node.cat(cid)) {\n        // node.cat('QmRV7njbZs1iCP3g7HYgwqDnS2Pd4cL2yKGpasNodHe8dk')) {\n        // log(data.toString())\n        log(data)\n    }\n}\n\nasync function pinFile(cid) {\n    let cid2 = await node.pin.add(cid)\n    log(\"pinned file:\" + cid2)\n}\n// export {log}\nwindow.nft= {log,addBase64File}"],"names":["_nftStorageJs","require","log","message","logHandler","postMessage","document","addEventListener","async","client","NFTStorage","token","window","onNodeReady","nft","addBase64File","taskId","base64String","delay","cid","file","storeBlob","toString","addFile","dataurl","arr","split","bstr","match","atob","n","length","u8arr","Uint8Array","charCodeAt","dataURLtoFile","setTimeout","JSON","stringify","task_id","onUploadComplete"],"version":3,"file":"index.594f44d7.js.map"}